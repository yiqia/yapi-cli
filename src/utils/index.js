import { readJsonSync, outputFile, pathExists } from "fs-extra/esm";
import consola from "consola";
import path from "path";
import os from "os";
import { fileURLToPath } from "url";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(fileURLToPath(import.meta.url));

const cwd = process.cwd().replace(/\\/g, "/");

consola.log("__filename", __filename);
consola.log("__dirname", __dirname);

// 检查配置信息是否完善
export function checkConfig(config) {
  const { cookie, outPath, url, projectId } = config;
  if (!cookie || !outPath || !url || !projectId) {
    consola.error("请检查配置信息是否填写完成");
    return;
  }
  return true;
}

// 读取文件
export async function readJsonFile(pathStr) {
  try {
    consola.log(path.resolve(__dirname, "../../", pathStr));
    return await readJsonSync(path.resolve(__dirname, "../../", pathStr));
  } catch (err) {
    consola.error("读取json文件失败");
  }
  return;
}

// 读取配置文件
export async function readConfig() {
  let config = {};
  try {
    consola.log("path", `${cwd}/yapi-cli-config.mjs`);
    // 判断系统环境
    if (os.platform() === "win32") {
      config = await import(`file://${cwd}\\yapi-cli-config.mjs`);
    } else {
      config = await import(`${cwd}/yapi-cli-config.mjs`);
    }
    consola.log('configs',config)
  } catch (err) {
    consola.error("没有配置文件，请先执行：yapi-cli init",err);
    return;
  }
  return config.default;
}

// 根据目录和内容创建文件
export async function createFile(path, content) {
  try {
    if (await pathExists(path)) {
      consola.log(`文件已创建: ${path}`);
    } else {
      await outputFile(path, content);
    }
  } catch (err) {
    consola.error(`创建文件时出错: ${err}`);
  }
}

export function removeText(input) {
  const textToRemove = `/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */`;

  return input.replace(textToRemove, "").trim();
}

export function convertName(str) {
  const parts = str.split("/");
  let result = "";

  for (let i = 0; i < parts.length; i++) {
    if (parts[i] === "") continue;
    const word = parts[i];
    if (i === 1) {
      result += word;
    } else {
      result += word.charAt(0).toUpperCase() + word.slice(1);
    }
  }

  return result;
}

// 将query转换类型
export function queryToTs(arr, name) {
  const ts = `export interface ${name} {
  [k: string]: unknown;
  ${arr.map((item) => `${item.name}: string; \n  `).join("")}
}
`;
  return ts;
}

// 转换types名
export function convertString(str, add) {
  try {
    const parts = str.split("/");
    let result = "";

    for (let i = 0; i < parts.length; i++) {
      if (i === 0 || parts[i] === "") continue;
      const words = parts[i].split("_");
      for (const word of words) {
        result += word.charAt(0).toUpperCase() + word.slice(1);
      }
    }
    return result + add + "Types";
  } catch (err) {
    consola.error("转换types名失败", str);
  }
}

// 删除不需要的ref字段
export function removeRefFields(jsonObject) {
  if (typeof jsonObject === "object" && jsonObject !== null) {
    delete jsonObject["$$ref"];
    delete jsonObject["$ref"];
    for (const key in jsonObject) {
      removeRefFields(jsonObject[key]);
    }
  } else if (Array.isArray(jsonObject)) {
    jsonObject.forEach((item) => removeRefFields(item));
  }
}
